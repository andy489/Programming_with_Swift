/*
      Board representation: [Array]

      A     B     C     D     E     F     G
      :     :     :     :     :     :     :
      :     :     :     :     :     :     :
1....[0]----÷-----÷----[1]----÷----------[2].....1
      |     :     :     |     :     :     |
2.....|....[3]----÷----[4]----÷----[5]....|......2
      |     |     :     |     :     |     |
3.....|.....|....[6]---[7]---[8]....|.....|......3
      |     |     |     :     |     |     |
4....[9]---[10]--[11]........[12]--[13]--[14]....4
      |     |     |     :     |     |     |
5.....|.....|....[15]--[16]--[17]   |     |......5
      |     |     :     |     :     |     |
6.....|....[18]---÷----[19]---÷----[20]   |......6
      |     :     :     |     :     :     |
7....[21]---÷-----÷----[22]---÷-----÷----[23]....7
      :     :     :     :     :     :     :
      :     :     :     :     :     :     :
      A     B     C     D     E     F     G
 */

/*
        Какво има един камък/клетка (Stone или Node)?
        Член данни:
            - позиция на която се намира на дъската: може да е Int, а може и да е String,
              a може и да е enum, който е асоцииран с rawValue Int
            - съседи. Това ще е масив към други камъни (от същия тип какъвто е този клас), но
              те ще реферират към вече направени инстанции от този клас
        Член функции:
            + инициализатор
            + гетър
            + сетър
            + зануляване (изчистване на позиция)
            + принтиране на цвят/отбелязване
            + копиране на данни върху друго камъче/ноудче
            + свободни съседи
            + участва ли в активна мелница
        extension Node: Equatable { } наследяване на протокол за приравняване - две позиции
            ще са равни само ако  съвпадат (===, т.е. сочат на едно и също място)
*/

enum StoneMark: Int {
    case empty = 1
    case black
    case white
}

class Node {
    private var _id: Int
    private var _mark: StoneMark
    
    init(id: Int, mark: StoneMark){
        _id = id
        _mark = mark
    }
    
    func getMark() -> Int {
        _mark.rawValue
    }
}


/*
    Какво ще има една дъска за игра?
    Член данни:
        - масив от клетки
    Методи:
        + състояние на дъската (принтиране на дъската)
        + поставяне на камъче върху позиция (позиция и цвят)
        + връщане на камъче от дъска (тази референция на позиция 				сочи ли към Node или е nil)
        + изчистване на дъска
        + прикачване на клетки до съседните и клетки
*/
 
